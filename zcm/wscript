#! /usr/bin/env python
# encoding: utf-8

import os
from waflib.Errors import WafError

def build(ctx):
    ctx.env.RPATH_zcm = [ctx.path.get_bld().abspath()]

    ctx.shlib(target = 'zcm',
              # Note: Had to make the include path one level up so that includes
              #       within this directory structure would match the structure
              #       of the installed files. Includes should be written as:
              #       #include "zcm/file.h".
              includes = '..',
              export_includes = '..',
              use = ['default', 'zmq'],
              source = ctx.path.ant_glob(['*.cpp', '*.c',
                                          'util/*.c', 'util/*.cpp',
                                          'tools/*.c', 'tools/*.cpp',
                                          'json/jsoncpp.cpp',
                                          'transport/**/*.c', 'transport/**/*.cpp'],
                                          excl='transport/third-party'))


    embedSource = ['zcm.h', 'zcm_private.h', 'zcm.c', 'zcm-cpp.hpp', 'zcm-cpp-impl.hpp',
                   'zcm_coretypes.h', 'transport.h', 'nonblocking.h', 'nonblocking.c',
                   'transport/generic_serial_transport.h',
                   'transport/generic_serial_transport.c' ]

    if ctx.env.USING_THIRD_PARTY:
        embedSource.append('transport/third-party/embedded/**')

    embedSource = ctx.path.ant_glob(embedSource)
    embedSource.append(ctx.path.find_or_declare("../zcm.gitid"))

    ## Collect files for Embedded
    ctx(rule   = 'tar czf ${TGT} ${SRC}',
        name   = 'embed-tar',
        source = embedSource,
        target = '.zcm-embed-tmp.tar.gz',
        color  = "PINK")

    ctx(rule   = package_embedded,
        name   = 'embed-tar-finish',
        source = '.zcm-embed-tmp.tar.gz',
        target = 'zcm-embed.tar.gz',
        color  = "PINK",
        after  = 'embed-tar')

    ## Test the embedded export
    ctx(rule   = exec_test_embedded,
        source = 'zcm-embed.tar.gz',
        target = 'zcm-embed-tests',
        color  = "PINK",
        after  = 'embed-tar-finish')

    ctx.install_files('${PREFIX}/include/zcm',
                      ['zcm.h', 'zcm_coretypes.h', 'transport.h', 'transport_registrar.h',
                       'url.h', 'eventlog.h', 'zcm-cpp.hpp', 'zcm-cpp-impl.hpp',
                       'transport_register.hpp', 'message_tracker.hpp'])

    ctx.install_files('${PREFIX}/include/zcm/tools',
                      ['tools/IndexerPlugin.hpp',
                       'tools/TranscoderPlugin.hpp'])

    ctx.install_files('${PREFIX}/include/zcm/util', 'util/Filter.hpp')

    ctx.install_files('${PREFIX}/include/zcm/json',
                      ['json/json.h', 'json/json-forwards.h'])

    ctx.install_files('${PREFIX}/include/zcm/transport',
                      ['transport/generic_serial_transport.h'])

    ctx.recurse('util')

    if ctx.env.USING_JAVA:
        ctx.recurse('java');

    if ctx.env.USING_NODEJS:
        ctx.recurse('js');

    if ctx.env.USING_PYTHON:
        ctx.recurse('python')

    if ctx.env.USING_CXXTEST:
        ctx.cxxtest(use = ['zcm', 'testzcmtypes'])

def package_embedded(tsk):
    gen = tsk.generator
    bld = gen.bld

    outputDir = os.path.dirname(tsk.outputs[0].abspath())

    cmd = 'fldr=' + tsk.outputs[0].relpath() + ' && mkdir -p ${fldr%%.*} && ' + \
          'cd ${fldr%%.*} && tar -xaf ' + str(tsk.inputs[0])
    ret = tsk.exec_command(cmd)
    if ret is not 0:
        raise WafError('Unable to prep files for zcm-embed tarball generation')

    cmd = 'fldr=' + tsk.outputs[0].relpath() + \
          ' && ../scripts/prepend-embed-guards.sh ${fldr%%.*}'
    ret = tsk.exec_command(cmd)
    if ret is not 0:
        raise WafError('Unable to prepend embed guard in zcm-embed tarball generation')

    cmd = 'fldr=' + tsk.outputs[0].relpath() + ' && cd ${fldr%%.*} && ' + \
          'tar czf ' + tsk.outputs[0].abspath() + ' *'
    ret = tsk.exec_command(cmd)
    if ret is not 0:
        raise WafError('Unable to generate zcm-embed tarball')

    return 0

def exec_test_embedded(tsk):
    src = tsk.inputs[0].abspath()
    blddir =  os.path.dirname(src)
    testdir = blddir+'/test-embed'
    ret =  tsk.exec_command('rm -rf {0} && mkdir {0} && cd {0} && tar xf {1} && ' \
                            'cc -std=c89 -I. -DZCM_EMBEDDED -c zcm/*.c && ' \
                            'echo "embed passed" > {2}' \
                            .format(testdir, src, tsk.outputs[0].abspath()))
    if ret is not 0:
        raise WafError('Embedded build failed, check embedded core files for C89 compliance')
    return ret
