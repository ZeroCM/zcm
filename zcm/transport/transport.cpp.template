#include "zcm/transport.h"
/** If you choose to register the transport with the registrar, use these headers
#include "zcm/transport_registrar.h"
#include "zcm/transport_register.hpp"
**/
#include <cstdint>
#include <cstdio>
#include <cassert>

// Define this the class name you want
//#define ZCM_TRANS_NAME YourClassNameHere
//#define MTU (SSIZE_MAX)

struct ZCM_TRANS_CLASSNAME : public zcm_trans_t
{
    ZCM_TRANS_CLASSNAME(/* Add any args here (e.g. 'const char* url' */)
    {
        vtbl = &methods;
    }

    ~ZCM_TRANS_CLASSNAME()
    {
    }

    /********************** METHODS **********************/
    size_t getMtu()
    {
        return MTU;
    }

    int sendmsg(zcm_msg_t msg)
    {
        // WRITE ME
        assert(0);
    }

    int recvmsgEnable(const char *channel, bool enable)
    {
        // WRITE ME
        assert(0);
    }

    int recvmsg(zcm_msg_t *msg, unsigned timeout)
    {
        // WRITE ME
        assert(0);
    }

    int setQueueSize(unsigned numMsgs)
    {
        // WRITE ME
        assert(0);
    }

    int getNumDroppedMessages()
    {
        // WRITE ME
        assert(0);
    }

    void update()
    {
        // WRITE ME
        assert(0);
    }

    void destroy()
    {
        // WRITE ME
        assert(0);
    }

    /********************** STATICS **********************/
    static zcm_trans_methods_t methods;
    static ZCM_TRANS_CLASSNAME *cast(zcm_trans_t *zt)
    {
        assert(zt->vtbl == &methods);
        return (ZCM_TRANS_CLASSNAME*)zt;
    }

    static size_t _getMtu(zcm_trans_t *zt)
    { return cast(zt)->getMtu(); }

    static int _sendmsg(zcm_trans_t *zt, zcm_msg_t msg)
    { return cast(zt)->sendmsg(msg); }

    static int _recvmsgEnable(zcm_trans_t *zt, const char *channel, bool enable)
    { return cast(zt)->recvmsgEnable(channel, enable); }

    static int _recvmsg(zcm_trans_t *zt, zcm_msg_t *msg, unsigned timeout)
    { return cast(zt)->recvmsg(msg, timeout); }

    static int _getNumDroppedMessages(zcm_trans_t *zt)
    { return cast(zt)->getNumDroppedMessages(); }

    static int _setQueueSize(zcm_trans_t *zt, unsigned numMessages)
    { return cast(zt)->setQueueSize(numMessages); }

    static int _update(zcm_trans_t *zt)
    { return cast(zt)->update(); }

    static void _destroy(zcm_trans_t *zt)
    { delete cast(zt); }

    /** If you choose to use the registrar, use a static registration member **/
    static const TransportRegister reg;
};

zcm_trans_methods_t ZCM_TRANS_CLASSNAME::methods = {
    &ZCM_TRANS_CLASSNAME::_getMtu,
    &ZCM_TRANS_CLASSNAME::_sendmsg,
    &ZCM_TRANS_CLASSNAME::_recvmsgEnable,
    &ZCM_TRANS_CLASSNAME::_recvmsg,
    &ZCM_TRANS_CLASSNAME::_getNumDroppedMessages,
    &ZCM_TRANS_CLASSNAME::_setQueueSize,
    &ZCM_TRANS_CLASSNAME::_update,
    &ZCM_TRANS_CLASSNAME::_destroy,
};

/** Add a create method here and initialize the register, like this:
static zcm_trans_t *create()
{
    return new ZCM_TRANS_CLASSNAME();
}

const TransportRegister ZCM_TRANS_CLASSNAME::reg(
    "TransName", "Trans description (especially url components)", create);
**/
