#!/bin/bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
THISDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
ROOTDIR=${THISDIR%/examples}
BUILDDIR=$ROOTDIR/build
BUILDEXAMPLESDIR=$BUILDDIR/examples/examples

INSTALL_BASE="/usr/local"
if [[ $1 != "" ]]; then
    INSTALL_BASE=$1
fi

echo $PATH | grep -q $INSTALL_BASE/bin
ret=$?
if [ $ret -ne 0 ]; then
    export PATH=$PATH:$INSTALL_BASE/bin
fi

echo $PKG_CONFIG_PATH | grep -q $INSTALL_BASE/lib/pkgconfig
ret=$?
if [ $ret -ne 0 ]; then
    export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$INSTALL_BASE/lib/pkgconfig
fi

echo $PKG_CONFIG_PATH | grep -q $INSTALL_BASE/lib64/pkgconfig
ret=$?
if [ $ret -ne 0 ]; then
    export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$INSTALL_BASE/lib64/pkgconfig
fi

echo $LD_LIBRARY_PATH | grep -q $INSTALL_BASE/lib
ret=$?
if [ $ret -ne 0 ]; then
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$INSTALL_BASE/lib/
fi

echo $LD_LIBRARY_PATH | grep -q $INSTALL_BASE/lib64
ret=$?
if [ $ret -ne 0 ]; then
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$INSTALL_BASE/lib64/
fi

export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer
export ASAN_OPTIONS=check_initialization_order=1
export CLASSPATH=$CLASSPATH:$INSTALL_BASE/share/java/zcm.jar
export CLASSPATH=$CLASSPATH:$INSTALL_BASE/share/java/zcm-tools.jar
export CLASSPATH=$CLASSPATH:$BUILDEXAMPLESDIR/types/examplezcmtypes.jar
export CLASSPATH=$CLASSPATH:$BUILDEXAMPLESDIR/types/examplezcmtypespfx.jar
export CLASSPATH=$CLASSPATH:$BUILDEXAMPLESDIR/java/example.jar
export ZCM_SPY_LITE_PATH=$BUILDEXAMPLESDIR/types/libexamplezcmtypes.so
export PJ_ZCMTYPES_LIB_PATH=$ZCM_SPY_LITE_PATH
export ZCM_DEFAULT_URL=ipc
export JULIA_LOAD_PATH="$JULIA_LOAD_PATH:$INSTALL_BASE/share/julia:$BUILDEXAMPLESDIR/types"
export PATH=$PATH:~/.local/bin
if [ -z ${PYTHON+x} ]; then
    export PYTHON=$(which python)
fi
# Note: waf loads waftools out of your PYTHONPATH, so we can use this variable to communicate
#       to waf (especially in submodules) where our tools are stored
if [ $? -eq 0 ]; then
    export ZCM_PYTHON=$INSTALL_BASE
    export PYTHONPATH=$($PYTHON -c "
import sys
import os
import sysconfig
path_in_commlib = sysconfig.get_path('stdlib', vars={'installed_base': os.environ.get('ZCM_PYTHON')})
print(os.path.join(path_in_commlib, 'dist-packages'))
    ")
fi
export PYTHONPATH=$ZCM_PYTHON/share/waf:$PYTHONPATH

checkJuliaInstall()
{
    juliaVersion=$(julia --version 2>/dev/null)
    juliaExists=$?
    juliaVersion=$(echo "$juliaVersion" | xargs | cut -d ' ' -f 3)
    if [[ $juliaExists -ne 0 || \
        ("$juliaVersion" != "1.6.0" && "$juliaVersion" != "0.6.4") ]]; then
        return 1
    else
        return 0
    fi
}
checkJuliaInstall
ret=$?
if [ $ret -ne 0 ]; then
    export PATH=$PATH:$ROOTDIR/deps/julia/bin
    checkJuliaInstall
    ret=$?
    if [ $ret -ne 0 ]; then echo "Unable to find julia"; fi
fi

. $ROOTDIR/deps/cxxtest/.env
